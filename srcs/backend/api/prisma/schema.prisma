// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String    @id @default(uuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    login        String    @unique
    displayName  String    @unique
    email        String
    image        String
    twoFA        Boolean   @default(false)
    twoFASecret  String?
    refreshToken String?
    status       Status    @default(ONLINE)
    messages     Message[]
    memberOf     Channel[] @relation("members")
    ownerOf      Channel[] @relation("ownership")
    adminOf      Channel[] @relation("admins")
    bannedFrom   Channel[] @relation("banned")
    // mutedFrom    Channel[] @relation("muted")
    muted        Mute[]    @relation("mutes")
    friends      User[]    @relation("friends")
    friendOf     User[]    @relation("friends")
    blocked      User[]    @relation("blocked")
    blockedBy    User[]    @relation("blocked")
    stats        Stat?
}

model Message {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    channel   Channel  @relation(fields: [channelId], references: [id])
    channelId String
}

model Channel {
    id         String            @id @default(uuid())
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    name       String
    messages   Message[]
    members    User[]            @relation("members")
    banned     User[]            @relation("banned")
    // muted      User[]            @relation("muted")
    muted      Mute[]            @relation("mutes")
    admins     User[]            @relation("admins")
    owner      User              @relation("ownership", fields: [ownerId], references: [id])
    ownerId    String
    isDM       Boolean           @default(false)
    visibility ChannelVisibility @default(PUBLIC)
    password   String?
}

model Mute {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation("mutes", fields: [userId], references: [id])
    userId    String
    channel   Channel  @relation("mutes", fields: [channelId], references: [id])
    channelId String
}

model Stat {
    id          String @id @default(uuid())
    gamesPlayed Int    @default(0)
    wins        Int    @default(0)
    losses      Int    @default(0)
    user        User   @relation(fields: [userId], references: [id])
    userId      String @unique
}

enum Status {
    ONLINE
    OFFLINE
    IN_GAME
}

enum Roles {
    OWNER
    ADMIN
    MEMBER
}

enum ChannelVisibility {
    PUBLIC
    PRIVATE
    PROTECTED
}
