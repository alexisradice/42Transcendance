// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    login         String    @unique
    displayName   String    @unique
    email         String
    image         String
    twoFA         Boolean   @default(false)
    twoFASecret   String?
    refreshToken  String?
    status        Status    @default(ONLINE)
    messages      Message[]
    memberOf      Channel[] @relation("members")
    ownerOf       Channel[] @relation("ownership")
    adminOf       Channel[] @relation("admins")
    bannedFrom    Channel[] @relation("banned")
    muted         Mute[]    @relation("mutes")
    friends       User[]    @relation("friends")
    friendOf      User[]    @relation("friends")
    blocked       User[]    @relation("blocked")
    blockedBy     User[]    @relation("blocked")
    stats         Stat?
    gamesPlayed   Game[]    @relation("played")
    notifications Notif[]
    winnerOf      Game[]    @relation("wins")
    loserOf       Game[]    @relation("losses")
}

model Notif {
    id          String   @id @default(uuid())
    channelId   String
    lastChecked DateTime
    newMsg      Boolean
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique
}

model Message {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
    channelId String
}

model Channel {
    id         String            @id @default(uuid())
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    name       String
    messages   Message[]
    members    User[]            @relation("members")
    banned     User[]            @relation("banned")
    muted      Mute[]            @relation("mutes")
    admins     User[]            @relation("admins")
    owner      User              @relation("ownership", fields: [ownerId], references: [id])
    ownerId    String
    visibility ChannelVisibility @default(PUBLIC)
    password   String?
}

model Mute {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation("mutes", fields: [userId], references: [id])
    userId    String
    channel   Channel  @relation("mutes", fields: [channelId], references: [id], onDelete: Cascade)
    channelId String
}

model Stat {
    id          String @id @default(uuid())
    gamesPlayed Int    @default(0)
    wins        Int    @default(0)
    losses      Int    @default(0)
    winStreak   Int    @default(0)
    user        User   @relation(fields: [userId], references: [id])
    userId      String @unique
}

enum Status {
    ONLINE
    OFFLINE
    IN_QUEUE
    IN_GAME
}

enum Roles {
    OWNER
    ADMIN
    MEMBER
}

enum ChannelVisibility {
    PUBLIC
    PRIVATE
    PROTECTED
    DM
}

model Game {
    id          String   @id @default(uuid())
    createdAt   DateTime @default(now())
    players     User[]   @relation("played")
    winner      User     @relation("wins", fields: [winnerId], references: [id])
    loser       User     @relation("losses", fields: [loserId], references: [id])
    winnerScore Int
    loserScore  Int
    ballSpeed   Int
    paddleSize  String
    winnerId    String
    loserId     String
}
